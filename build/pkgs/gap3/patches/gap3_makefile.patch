Adding the option to autodetect the system and running "make" without
any options specifying the system.

diff -ur src/gap3/src/Makefile.orig src/gap3/src/Makefile
--- src/gap3/src/Makefile.orig     2016-03-24 11:35:24.027893512 +0100
+++ src/gap3/src/Makefile  2016-03-24 11:35:07.515893376 +0100
@@ -48,6 +48,9 @@
 ##  DJGPP differently you have to change this below.
 ##
 #H  $Log: Makefile,v $
+#H  Revision 2016/03/11 Christian Stump
+#H  Autouse Linux/Darvin and 32bit/64bit.
+#H
 #H  Revision 2014/08/22 Jean Michel
 #H  remove obsolete targets. Add 64bit target.
 #H
@@ -105,103 +108,40 @@
 ##
 SHELL = /bin/sh
 
-#############################################################################
-##
-#T  Targets . . . . .  targets of the form <vendor>-<cpu>-<system>-<compiler>
-##
-##  Following are the targets that the	user can specify.  Each target	calls
-##  'make' recursively twice.
-##
-##  The first time it calls
-##
-##	@$(MAKE) <system-file>.o  CFLAGS="$(COPTS) <copts>"
-##
-##  where <system-file> is either 'system' or the name of another system file
-##  and where <copts> are the options to  pass to  pass	 to  the  C compiler,
-##  e.g., 'SYS_IS_BSD' or 'SYS_IS_MSDOS'.
-##
-##  The second time it calls
-##
-##	@$(MAKE) gap  CC=<c-compiler> CFLAGS="$(COPTS) <opts>" \
-##		      SYS_FILE=<system-file>.o LOPTS="$(LOPTS)"
-##
-##  where <system-file> is the same file as above, <c-compiler> is  the	 name
-##  of the C compiler to use ($(CC) is used if this is not present),  <copts>
-##  are	 the options to pass ot	 the  C compiler, e.g., '-O2'.
-##
-unknown:
-	@echo "usage: 'make <target>' where target is one of"
-	@echo "'x86linux-gcc64'   for x86linux with gcc"
-	@echo "'x86linux-gcc'     for x86linux with gcc in 32bit mode"
-	@echo "'macosx-gcc'       for mac os x with gcc"
-	@echo "'x86bsd-gcc'       for x86BSD with gcc"
-	@echo "'sun-sparc-solaris-gcc' for SUN under Solaris with GNU cc"
-	@echo "'sun-sparc-solaris-cc'  for SUN under Solaris with cc"
-	@echo "'bsd'		       for others under Berkeley UNIX with cc"
-	@echo "	"
-	@echo "	  additional C compiler and linker flags can be passed with"
-	@echo "	  'make <target> COPTS=<compiler-opts> LOPTS=<linker-opts>',"
-	@echo "	  i.e., 'make x86linux-gcc COPTS=-g LOPTS=-g for debug'"
-
-x86linux-gcc:
-	@$(MAKE) system.o   CC=gcc  CFLAGS="$(COPTS) -m32 -O2 -DSYS_IS_USG -DSYS_HAS_TIME_PROTO -DSYS_HAS_SIGNAL_PROTO -DSYS_HAS_IOCTL_PROTO"
-	@$(MAKE) gap CC=gcc CFLAGS="$(COPTS) -m32 -O " SYS_FILE=system.o LOPTS="$(LOPTS) -m32 -static"
-	strip gap
-	mv gap ../bin/gap.x86linux
-
-x86linux-gccd:
-	@$(MAKE) system.o   CC=gcc  CFLAGS="-g -m32 -O2 -DSYS_IS_USG -DSYS_HAS_TIME_PROTO -DSYS_HAS_SIGNAL_PROTO -DSYS_HAS_IOCTL_PROTO"
-	@$(MAKE) gap CC=gcc CFLAGS="-g -m32 -O " SYS_FILE=system.o LOPTS="-g -m32 -static"
-
-x86linux-gcc64:
-	@$(MAKE) system.o   CC=gcc  CFLAGS="$(COPTS) -O -DSYS_IS_64_BIT -DSYS_IS_USG -DSYS_HAS_TIME_PROTO -DSYS_HAS_SIGNAL_PROTO -DSYS_HAS_IOCTL_PROTO"
-	@$(MAKE) gap CC=gcc CFLAGS="$(COPTS) -O -DSYS_IS_64_BIT " SYS_FILE=system.o LOPTS="$(LOPTS) -static"
-	strip gap
-	mv gap ../bin/gap.x86linux64
-
-x86-dos-djgpp:
-	@$(MAKE) system.o   CC=gcc  CFLAGS="$(COPTS) -DSYS_IS_MSDOS_DJGPP -DSYS_HAS_MISC_PROTO"
-	@$(MAKE) gapdjg.exe CC=gcc  CFLAGS="$(COPTS) -O1"  SYS_FILE=system.o  LOPTS="$(LOPTS)"
-
-x86-dos-djgppcross:
-	@$(MAKE) system.o   CC=dos-gcc	CFLAGS="$(COPTS) -DSYS_IS_MSDOS_DJGPP -DSYS_HAS_MISC_PROTO"
-	@$(MAKE) gapdjg.exe CC=dos-gcc	CFLAGS="$(COPTS) -O1"  SYS_FILE=system.o  LOPTS="$(LOPTS)"
-
-# sbrk doesn't work in macosx so we need to use vm_allocate
-macosx-gcc:
-	@$(MAKE) system.o   CC=gcc  CFLAGS="$(COPTS) -m32 -DSYS_IS_MACOSX -DARCH_INCLUDE -DSYS_HAS_IOCTL_PROTO"
-	@$(MAKE) gap	    CC=gcc  CFLAGS="$(COPTS) -m32 -O2"  SYS_FILE=system.o  LOPTS="$(LOPTS) -m32"
+ARCH = $(shell getconf LONG_BIT)
+UNAME_S = $(shell uname -s)
 
-# sbrk doesn't work in macosx so we need to use vm_allocate
-# This is using Frank Luebeck's optimized compile....but it doesn't
-# change the GAPstones for the files in ../tst
-macosx-gcc-686-optimized:
-	@$(MAKE) system.o   CC=gcc  CFLAGS="$(COPTS) -m32 -fomit-frame-pointer -pipe -fno-strength-reduce -march=i686 -falign-loops=2 -falign-jumps=2 -falign-functions=2 -DCPU=686 -g -O2 -DSYS_IS_MACOSX -DARCH_INCLUDE -DSYS_HAS_IOCTL_PROTO"
-	@$(MAKE) gap	    CC=gcc  CFLAGS="$(COPTS) -m32 -fomit-frame-pointer -pipe -fno-strength-reduce -march=i686 -falign-loops=2 -falign-jumps=2 -falign-functions=2 -DCPU=686 -g -O3"  SYS_FILE=system.o  LOPTS="$(LOPTS) -m32"
-
-sun-sparc-solaris-cc:
-	@$(MAKE) system.o   CC=cc  CFLAGS="$(COPTS) -O -DSYS_IS_USG -DSYS_HAS_TIME_PROTO -DSOLARIS2"
-	@echo "Don't worry about 'out of range' and 'overflow' warnings"
-	@echo "(29 in total)"
-	@$(MAKE) gap	    CC=cc  CFLAGS="$(COPTS) -O2"  SYS_FILE=system.o  LOPTS="$(LOPTS)"
-
-sun-sparc-solaris-gcc2:						   
-	@$(MAKE) system.o   CC=gcc  CFLAGS="$(COPTS)  -O6 -DSYS_IS_USG -DSYS_HAS_TIME_PROTO -DSOLARIS2"						       
-	@$(MAKE) gap	    CC=gcc  CFLAGS="$(COPTS)  -O6"  SYS_FILE=system.o LOPTS="$(LOPTS)"								     
-
-# 'sys/times.h' claims 'times' returns 'clock_t' (how shall it return -1?)
-sun-sparc-sunos-gcc:
-	@$(MAKE) system.o   CC=gcc  CFLAGS="$(COPTS) -DSYS_IS_USG -DSYS_HAS_TIME_PROTO -DSYS_HAS_SIGNAL_PROTO"
-	@$(MAKE) gap	    CC=gcc  CFLAGS="$(COPTS) -O2"  SYS_FILE=system.o  LOPTS="$(LOPTS)"
-
-# 'sys/times.h' claims 'times' returns 'clock_t' (how shall it return -1?)
-sun-sparc-sunos-cc:
-	@$(MAKE) system.o   CFLAGS="$(COPTS) -DSYS_IS_USG -DSYS_HAS_TIME_PROTO"
-	@$(MAKE) gap	    CFLAGS="$(COPTS) -O"  SYS_FILE=system.o  LOPTS="$(LOPTS)"
-
-bsd:
-	@$(MAKE) system.o   CC=$(CC)  CFLAGS="$(COPTS) -DSYS_IS_BSD"
-	@$(MAKE) gap	    CC=$(CC)  CFLAGS="$(COPTS) -O"  SYS_FILE=system.o  LOPTS="$(LOPTS)"
+unknown:
+	@echo "###########################################################"
+	@echo "#  Building GAP3 for '$(UNAME_S)' and '$(ARCH) bit'"
+	@echo "###########################################################"
+
+ifeq ($(UNAME_S),Linux)
+    ifeq ($(ARCH),64)
+		@$(MAKE) system.o   CC=gcc  CFLAGS="$(COPTS) -O -DSYS_IS_64_BIT -DSYS_IS_USG -DSYS_HAS_TIME_PROTO -DSYS_HAS_SIGNAL_PROTO -DSYS_HAS_IOCTL_PROTO"
+		@$(MAKE) gap CC=gcc CFLAGS="$(COPTS) -O -DSYS_IS_64_BIT " SYS_FILE=system.o LOPTS="$(LOPTS) -static"
+		mv gap ../bin/gap3
+    else
+		@$(MAKE) system.o   CC=gcc  CFLAGS="$(COPTS) -O2 -DSYS_IS_USG -DSYS_HAS_TIME_PROTO -DSYS_HAS_SIGNAL_PROTO -DSYS_HAS_IOCTL_PROTO"
+		@$(MAKE) gap CC=gcc CFLAGS="$(COPTS) -O " SYS_FILE=system.o LOPTS="$(LOPTS) -static"
+		mv gap ../bin/gap3
+    endif
+endif
+ifeq ($(UNAME_S),Darwin)
+    ifeq ($(ARCH),64)
+		@$(MAKE) system.o   CC=gcc  CFLAGS="$(COPTS) -DSYS_IS_MACOSX -DSYS_IS_64_BIT -DARCH_INCLUDE -DSYS_HAS_IOCTL_PROTO"
+		@$(MAKE) gap	    CC=gcc  CFLAGS="$(COPTS) -O2 -DSYS_IS_MACOSX -DSYS_IS_64_BIT "  SYS_FILE=system.o  LOPTS="$(LOPTS)"
+		mv gap ../bin/gap3
+    else
+		@$(MAKE) system.o   CC=gcc  CFLAGS="$(COPTS) -DSYS_IS_MACOSX -DARCH_INCLUDE -DSYS_HAS_IOCTL_PROTO"
+		@$(MAKE) gap	    CC=gcc  CFLAGS="$(COPTS) -O2 -DSYS_IS_MACOSX "  SYS_FILE=system.o  LOPTS="$(LOPTS)"
+		mv gap ../bin/gap3
+    endif
+endif
+
+	@echo "###########################################################"
+	@echo "#  Building complete, you can run GAP3 from './../bin/gap3'"
+	@echo "###########################################################"
 
 #############################################################################
 ##
