diff --git a/factory/facFactorize.cc b/factory/facFactorize.cc
index 63603f6..6e1fb48 100644
--- a/factory/facFactorize.cc
+++ b/factory/facFactorize.cc
@@ -48,6 +48,9 @@ CFList evalPoints (const CanonicalForm& F, CFList& eval, Evaluation& E)
   CFList result;
   Variable x= Variable (1);
 
+  CanonicalForm LCF=LC (F,x);
+  CFList LCFeval;
+
   bool found= false;
   bool allZero= true;
   bool foundZero= false;
@@ -56,10 +59,12 @@ CFList evalPoints (const CanonicalForm& F, CFList& eval, Evaluation& E)
   do
   {
     eval.insert (F);
+    LCFeval.insert (LCF);
     bool bad= false;
     for (int i= E.max(); i >= E.min(); i--)
     {
       eval.insert (eval.getFirst()( E [i], i));
+      LCFeval.insert (LCFeval.getFirst() (E [i], i));
       result.append (E[i]);
       if (!E[i].isZero())
         allZero= false;
@@ -69,6 +74,7 @@ CFList evalPoints (const CanonicalForm& F, CFList& eval, Evaluation& E)
       {
         result= CFList();
         eval= CFList();
+        LCFeval= CFList();
         bad= true;
         foundZero= false;
         break;
@@ -77,6 +83,15 @@ CFList evalPoints (const CanonicalForm& F, CFList& eval, Evaluation& E)
       {
         result= CFList();
         eval= CFList();
+        LCFeval= CFList();
+        bad= true;
+        break;
+      }
+      if ((i != 2) && (degree (LCFeval.getFirst(), i-1) != degree (LCF, i-1)))
+      {
+        result= CFList();
+        eval= CFList();
+        LCFeval= CFList();
         bad= true;
         break;
       }
@@ -92,6 +107,7 @@ CFList evalPoints (const CanonicalForm& F, CFList& eval, Evaluation& E)
     {
       result= CFList();
       eval= CFList();
+      LCFeval= CFList();
       E.nextpoint();
       continue;
     }
@@ -102,6 +118,7 @@ CFList evalPoints (const CanonicalForm& F, CFList& eval, Evaluation& E)
     {
       result= CFList();
       eval= CFList();
+      LCFeval= CFList();
       E.nextpoint();
       continue;
     }
@@ -112,6 +129,16 @@ CFList evalPoints (const CanonicalForm& F, CFList& eval, Evaluation& E)
     {
       result= CFList();
       eval= CFList();
+      LCFeval= CFList();
+      E.nextpoint();
+      continue;
+    }
+    contentx= content (iter.getItem());
+    if (degree (contentx) > 0)
+    {
+      result= CFList();
+      eval= CFList();
+      LCFeval= CFList();
       E.nextpoint();
       continue;
     }
@@ -362,6 +389,7 @@ multiFactorize (const CanonicalForm& F, const Variable& v)
     minFactorsLength= biFactors.length();
   else if (biFactors.length() > minFactorsLength)
     refineBiFactors (A, biFactors, Aeval2, evaluation, minFactorsLength);
+  minFactorsLength= tmin (minFactorsLength, biFactors.length());
 
   if (differentSecondVar == lengthAeval2)
   {
diff --git a/factory/facFqFactorize.cc b/factory/facFqFactorize.cc
index a3ece13..d5ae40e 100644
--- a/factory/facFqFactorize.cc
+++ b/factory/facFqFactorize.cc
@@ -135,8 +135,7 @@ CanonicalForm myCompress (const CanonicalForm& F, CFMap& N)
 {
   int n= F.level();
   int * degsf= new int [n + 1];
-  int ** swap;
-  swap= new int* [n + 1];
+  int ** swap= new int* [n + 1];
   for (int i= 0; i <= n; i++)
   {
     degsf[i]= 0;
@@ -203,7 +202,7 @@ CanonicalForm myCompress (const CanonicalForm& F, CFMap& N)
       N.newpair (Variable (i), Variable (swap[i] [0]));
   }
 
-  for (i= 0; i <= n; i++)
+  for (i= 0; i <= F.level(); i++)
     delete [] swap[i];
   delete [] swap;
 
@@ -741,6 +740,9 @@ evalPoints (const CanonicalForm& F, CFList & eval, const Variable& alpha,
 {
   int k= F.level() - 1;
   Variable x= Variable (1);
+  CanonicalForm LCF=LC (F, x);
+  CFList LCFeval;
+
   CFList result;
   FFRandom genFF;
   GFRandom genGF;
@@ -816,16 +818,29 @@ evalPoints (const CanonicalForm& F, CFList & eval, const Variable& alpha,
     }
     int l= F.level();
     eval.insert (F);
+    LCFeval.insert (LCF);
     bool bad= false;
     for (CFListIterator i= result; i.hasItem(); i++, l--)
     {
       eval.insert (eval.getFirst()(i.getItem(), l));
+      LCFeval.insert (LCFeval.getFirst()(i.getItem(), l));
       if (degree (eval.getFirst(), l - 1) != degree (F, l - 1))
       {
         if (!find (list, random))
           list.append (random);
         result= CFList();
         eval= CFList();
+        LCFeval= CFList();
+        bad= true;
+        break;
+      }
+      if ((l != 2) && (degree (LCFeval.getFirst(), l-1) != degree (LCF, l-1)))
+      {
+        if (!find (list, random))
+          list.append (random);
+        result= CFList();
+        eval= CFList();
+        LCFeval= CFList();
         bad= true;
         break;
       }
@@ -839,6 +854,7 @@ evalPoints (const CanonicalForm& F, CFList & eval, const Variable& alpha,
       if (!find (list, random))
         list.append (random);
       result= CFList();
+      LCFeval= CFList();
       eval= CFList();
       continue;
     }
@@ -850,6 +866,7 @@ evalPoints (const CanonicalForm& F, CFList & eval, const Variable& alpha,
       if (!find (list, random))
         list.append (random);
       result= CFList();
+      LCFeval= CFList();
       eval= CFList();
       continue;
     }
@@ -861,6 +878,18 @@ evalPoints (const CanonicalForm& F, CFList & eval, const Variable& alpha,
       if (!find (list, random))
         list.append (random);
       result= CFList();
+      LCFeval= CFList();
+      eval= CFList();
+      continue;
+    }
+
+    contentx= content (i.getItem());
+    if (degree (contentx) > 0)
+    {
+      if (!find (list, random))
+        list.append (random);
+      result= CFList();
+      LCFeval= CFList();
       eval= CFList();
       continue;
     }
@@ -1950,6 +1979,8 @@ evaluationWRTDifferentSecondVars (CFList*& Aeval, const CFList& evaluation,
     }
     if (!content(tmp,1).inCoeffDomain())
       preserveDegree= false;
+    if (!content(tmp).inCoeffDomain())
+      preserveDegree= false;
     if (!(gcd (deriv (tmp,x), tmp)).inCoeffDomain())
       preserveDegree= false;
     if (preserveDegree)
