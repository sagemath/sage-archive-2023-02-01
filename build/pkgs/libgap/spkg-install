#!/usr/bin/env bash

if [ -z "$SAGE_LOCAL" ]; then
    echo >&2 "SAGE_LOCAL undefined - exiting..."
    echo >&2 "Maybe run 'sage -sh'?"
    exit 1
fi

if [ "$SAGE64" = yes ]; then
    if [ -z $CFLAG64 ]; then
        CFLAG64=-m64
    fi
    CFLAGS="$CFLAGS $CFLAG64"
    CXXFLAGS="$CXXFLAGS $CFLAG64"
    echo "Building a 64-bit version of GAP (with '$CFLAG64')."
fi

if [ "$SAGE_DEBUG" == "yes" ] ; then
    # Note that -g3 allows you to use preprocessor macros in gdb which are widely used
    CFLAGS="$CFLAGS -O0 -g3 -DDEBUG_MASTERPOINTERS -DDEBUG_GLOBAL_BAGS -DDEBUG_FUNCTIONS_BAGS"
    #  -DDEBUG_HANDLER_REGISTRATION is broken
fi

source "$SAGE_LOCAL/gap/latest/sysinfo.gap"
echo "GAP was configured with $GAParch_system"

# location of the corresponding gap installation
# only used for the testsuite
CPPFLAGS="$CPPFLAGS"' -DSYS_DEFAULT_PATHS=\"'"$SAGE_LOCAL/gap/latest"'\"'

cd src

# Apply fixes to upstream source
echo "Applying patches..."
for patch in ../patches/*.patch; do
    [ -r "$patch" ] || continue  # Skip non-existing or non-readable patches
    patch -p1 <"$patch"
    if [ $? -ne 0 ]; then
        echo >&2 "Error applying '$patch'"
        exit 1
    fi
done

echo "Configuring libGAP..."
./configure --disable-static \
    CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" CPPFLAGS="$CPPFLAGS" \
    --with-gap_system_arch="$GAParch_system" \
    --with-sage="$SAGE_LOCAL" --with-gmp="$SAGE_LOCAL" --prefix="$SAGE_LOCAL"
if [ $? -ne 0 ]; then
    echo >&2 "Error configuring libGAP."
    exit 1
fi

echo "Building libGAP..."
$MAKE
if [ $? -ne 0 ]; then
    echo >&2 "Error building libGAP."
    exit 1
fi

echo "Installing libGAP..."
$MAKE install
if [ $? -ne 0 ]; then
    echo >&2 "Error installing libGAP."
    exit 1
fi

