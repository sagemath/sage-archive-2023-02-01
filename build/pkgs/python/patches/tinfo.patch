diff -druN src.orig/Lib/distutils/ccompiler.py src/Lib/distutils/ccompiler.py
--- src.orig/Lib/distutils/ccompiler.py	2014-01-05 18:57:04.783053177 +0100
+++ src/Lib/distutils/ccompiler.py	2014-01-05 19:57:50.586433772 +0100
@@ -842,8 +842,8 @@
     def library_filename(self, libname, lib_type='static',     # or 'shared'
                          strip_dir=0, output_dir=''):
         assert output_dir is not None
-        if lib_type not in ("static", "shared", "dylib"):
-            raise ValueError, "'lib_type' must be \"static\", \"shared\" or \"dylib\""
+        if lib_type not in ("static", "shared", "dylib", "import"):
+            raise ValueError, "'lib_type' must be \"static\", \"shared\", \"dylib\" or \"import\""
         fmt = getattr(self, lib_type + "_lib_format")
         ext = getattr(self, lib_type + "_lib_extension")
 
diff -druN src.orig/Lib/distutils/unixccompiler.py src/Lib/distutils/unixccompiler.py
--- src.orig/Lib/distutils/unixccompiler.py	2014-01-05 18:57:04.779053224 +0100
+++ src/Lib/distutils/unixccompiler.py	2014-01-05 20:24:44.862580174 +0100
@@ -79,9 +79,11 @@
     static_lib_extension = ".a"
     shared_lib_extension = ".so"
     dylib_lib_extension = ".dylib"
-    static_lib_format = shared_lib_format = dylib_lib_format = "lib%s%s"
+    import_lib_extension = ".dll.a"
+    import_lib_format = static_lib_format = shared_lib_format = dylib_lib_format = "lib%s%s"
     if sys.platform == "cygwin":
         exe_extension = ".exe"
+        shared_lib_extension = ".dll"
 
     def preprocess(self, source,
                    output_file=None, macros=None, include_dirs=None,
@@ -246,6 +248,7 @@
         shared_f = self.library_filename(lib, lib_type='shared')
         dylib_f = self.library_filename(lib, lib_type='dylib')
         static_f = self.library_filename(lib, lib_type='static')
+        import_f = self.library_filename(lib, lib_type='import')
 
         if sys.platform == 'darwin':
             # On OSX users can specify an alternate SDK using
@@ -261,6 +264,7 @@
 
 
         for dir in dirs:
+            implib = os.path.join(dir, import_f)
             shared = os.path.join(dir, shared_f)
             dylib = os.path.join(dir, dylib_f)
             static = os.path.join(dir, static_f)
@@ -277,7 +281,9 @@
             # data to go on: GCC seems to prefer the shared library, so I'm
             # assuming that *all* Unix C compilers do.  And of course I'm
             # ignoring even GCC's "-static" option.  So sue me.
-            if os.path.exists(dylib):
+            if os.path.exists(implib):
+                return implib
+            elif os.path.exists(dylib):
                 return dylib
             elif os.path.exists(shared):
                 return shared
@@ -286,3 +292,22 @@
 
         # Oops, didn't find it in *any* of 'dirs'
         return None
+
+    def implib_to_dll(self, dirs, implib, debug=0):
+        fp = os.popen("dlltool -I %s" % implib)
+        dlltool_output = fp.readlines()
+        ret = fp.close()
+
+        if ret is None or ret >> 8 == 0:
+            for ln in dlltool_output:
+                for dir in dirs:
+                    dll = os.path.join(dir, ln.rstrip('\n'))
+                    # We're second-guessing the linker here, with not much hard
+                    # data to go on: GCC seems to prefer the shared library, so I'm
+                    # assuming that *all* Unix C compilers do.  And of course I'm
+                    # ignoring even GCC's "-static" option.  So sue me.
+                    if os.path.exists(dll):
+                        return dll
+
+        # Oops, didn't find it in *any* of 'dirs'
+        return None
diff -druN src.orig/setup.py src/setup.py
--- src/setup.py.orig	2014-06-04 10:49:00.403972978 +0100
+++ src/setup.py	2014-06-04 10:52:42.131927994 +0100
@@ -701,8 +701,12 @@
         do_readline = self.compiler.find_library_file(lib_dirs, 'readline')
         readline_termcap_library = ""
         curses_library = ""
-        # Determine if readline is already linked against curses or tinfo.
+        # Determine if readline is linked against curses or tinfo.
         if do_readline and find_executable('ldd'):
+            # On Cygwin we have to find out which dll the implib point to
+            if host_platform == "cygwin" and find_executable('dlltool'):
+                do_readline = self.compiler.implib_to_dll(os.getenv('PATH').split(os.pathsep) + lib_dirs, do_readline)
+
             fp = os.popen("ldd %s" % do_readline)
             ldd_output = fp.readlines()
             ret = fp.close()
@@ -751,7 +755,10 @@
 
             readline_libs = ['readline']
             if readline_termcap_library:
-                pass # Issue 7384: Already linked against curses or tinfo.
+                if host_platform != "cygwin":
+                    pass # Issue 7384: Already linked against curses or tinfo.
+                else:
+                    readline_libs.append(readline_termcap_library)
             elif curses_library:
                 readline_libs.append(curses_library)
             elif self.compiler.find_library_file(lib_dirs +
@@ -1340,6 +1347,8 @@
                 # _curses_panel.so must link with panelw.
                 panel_library = 'panelw'
             curses_libs = [curses_library]
+            if readline_termcap_library == 'tinfo' and host_platform == "cygwin":
+                curses_libs.append(readline_termcap_library)
             curses_incs = find_file('curses.h', inc_dirs,
                                     [os.path.join(d, 'ncursesw') for d in inc_dirs])
             exts.append( Extension('_curses', ['_cursesmodule.c'],
